using System;
using System.Collections.Generic;
using System.Xml.Serialization;
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by xsd, Version=1.1.4322.2032.
//*****************************************************************************
//* THOMAS      | Ver. 01 | #BR17203 | 2017/08/02                            *
//*---------------------------------------------------------------------------*
//* 新增FDB(BR77X)之欄位及UI介面供777貨機設定使用：UldBulkLimit及LargePalletOverLap。*
//*****************************************************************************

namespace FlightDataBase
{
    /// <remarks/>
    [XmlRoot(Namespace = "", IsNullable = false)]
    public class Airtype
    {
        /// <remarks/>
        public AircraftInfomation AircraftInfomation;

        /// <remarks/>
        public AircraftConfiguration AircraftConfiguration;

        /// <remarks/>
        public MAC MAC;

        /// <remarks/>
        public TrimSheet TrimSheet;

        /// <remarks/>
        public AirtypeCGLmtForLateral CGLmtForLateral;

        /// <remarks/>
        public CabinConfiguration CabinConfiguration;

        /// <remarks/>
        public SeatRowIndex SeatRowIndex;

        /// <remarks/>
        public ZonePantryIndex ZonePantryIndex;

        /// <remarks/>
        public PantryCode PantryCode;

        /// <remarks/>
        public CrewInfomation CrewInfomation;

        /// <remarks/>
        public CrewDistribution CrewDistribution;

        /// <remarks/> 
        public FuelTank FuelTank;

        /// <remarks/>
        public AirtypeFuelTankArm FuelTankArm;

        /// <remarks/>
        public FuelFormula FuelFormula;

        //#BR19015
        public FuelDensity FuelDensity;
        
        /// <remarks/>
        public CargoFormula CargoFormula;

        /// <remarks/>
        public CargoInfomation CargoInfomation;

        /// <remarks/>
        public CargoPosition CargoPosition;

        /// <remarks/>
        [XmlElement("cpi")]
        public AirtypeCpi[] cpi;

        /// <remarks/>
        [XmlElement("Unsymmetrical")]
        public AirtypeUnsymmetrical[] Unsymmetrical;

        /// <remarks/>
        public AirtypeCargoVersion CargoVersion;

        /// <remarks/>
        public AirtypeStabilizer Stabilizer;

        /// <remarks/>
        [XmlArrayItem("Tank", IsNullable = false)]
        public AirtypeTank[] WaterTank;

        /// <remarks/>
        [XmlArrayItemAttribute("ShcInfo", IsNullable = false)]
        public AirtypeShcInfo[] SpecialLoadRestriction;

        /// <remarks/>
        [XmlAttribute()]
        public string name;

        /// <remarks/>
        [XmlAttribute()]
        public int major;

        /// <remarks/>
        [XmlAttribute()]
        public int minor;

        /// <remarks/>
        [XmlAttribute()]
        public string description;


        //#BR17203
        /// <remarks/>
        [XmlElement("LargePalletOverLap")]
        public AirtypeLargePalletOverLap[] LargePalletOverLap;
        //#BR17203

    }





    /// <remarks/>
    public class AirtypeShcInfo
    {
        /// <remarks/>
        [XmlAttributeAttribute()]
        public string shc;

        /// <remarks/>
        [XmlAttributeAttribute()]
        public string restriction;
    }

    /// <remarks/>
    public class AirtypeTank
    {
        /// <remarks/>
        [XmlAttribute()]
        public string name;

        /// <remarks/>
        [XmlAttribute()]
        public Single wt;

        /// <remarks/>
        [XmlAttribute()]
        public Single arm;
    }

    /// <remarks/>
    public class AirtypeStabilizerTakeoffTrimsInflectionPoint
    {
        /// <remarks/>
        [XmlAttribute()]
        public Single cg;

        /// <remarks/>
        [XmlAttribute()]
        public Single trim;
    }

    /// <remarks/>
    public class AirtypeStabilizerTakeoffTrimsInflection
    {
        /// <remarks/>
        [XmlElement("point")]
        public AirtypeStabilizerTakeoffTrimsInflectionPoint[] point;

        /// <remarks/>
        [XmlAttribute()]
        public int grossWt;

        /// <remarks/>
        [XmlAttribute()]
        public int scale;
    }

    /// <remarks/>
    public class AirtypeStabilizerTakeoffTrims
    {
        /// <remarks/>
        [XmlElement("Inflection")]
        public AirtypeStabilizerTakeoffTrimsInflection[] Inflection;

        /// <remarks/>
        [XmlAttribute()]
        public string thrust;

        /// <remarks/>
        [XmlAttribute()]
        public string flap;

        /// <remarks/>
        [XmlAttribute()]
        public Single adj_unit;

        /// <remarks/>
        [XmlAttribute()]
        public int max_unit;
    }

    /// <remarks/>
    public class AirtypeStabilizer
    {
        /// <remarks/>
        [XmlElement("TakeoffTrims")]
        public AirtypeStabilizerTakeoffTrims[] TakeoffTrims;
    }

    /// <remarks/>
    public class AirtypeCargoVersionLoadVersionNofitPattern
    {
        /// <remarks/>
        [XmlAttribute()]
        public string names;

        /// <remarks/>
        [XmlAttribute()]
        public Decimal maxWt;

        /// <remarks/>
        [XmlIgnore()]
        public bool maxWtSpecified;
    }

    /// <remarks/>
    public class AirtypeCargoVersionLoadVersionNofit
    {
        /// <remarks/>
        [XmlElement("pattern")]
        public AirtypeCargoVersionLoadVersionNofitPattern[] pattern;
    }

    /// <remarks/>
    public class AirtypeCargoVersionLoadVersionCmpPos
    {
        /// <remarks/>
        [XmlAttribute()]
        public string name;

        /// <remarks/>
        [XmlAttribute()]
        public Decimal lock1;

        /// <remarks/>
        [XmlIgnore()]
        public bool lock1Specified;

        /// <remarks/>
        [XmlAttribute()]
        public Decimal lock2;

        /// <remarks/>
        [XmlIgnore()]
        public bool lock2Specified;

        /// <remarks/>
        [XmlAttribute()]
        public Decimal x;

        /// <remarks/>
        [XmlIgnore()]
        public bool xSpecified;

        /// <remarks/>
        [XmlAttribute()]
        public Decimal y;

        /// <remarks/>
        [XmlIgnore()]
        public bool ySpecified;

        /// <remarks/>
        [XmlAttribute()]
        public Decimal w;

        /// <remarks/>
        [XmlIgnore()]
        public bool wSpecified;

        /// <remarks/>
        [XmlAttribute()]
        public Decimal h;

        /// <remarks/>
        [XmlIgnore()]
        public bool hSpecified;

        /// <remarks/>
        [XmlAttribute()]
        public string baseCode;
    }

    /// <remarks/>
    public class AirtypeCargoVersionLoadVersionCmp
    {
        /// <remarks/>
        [XmlElement("pos")]
        public AirtypeCargoVersionLoadVersionCmpPos[] pos;

        /// <remarks/>
        [XmlAttribute()]
        public string name;

        /// <remarks/>
        [XmlAttribute()]
        public int width;

        /// <remarks/>
        [XmlIgnore()]
        public bool widthSpecified;
    }

    /// <remarks/>
    public class AirtypeCargoVersionLoadVersion
    {
        /// <remarks/>
        [XmlElement("cmp")]
        public AirtypeCargoVersionLoadVersionCmp[] cmp;

        /// <remarks/>
        public AirtypeCargoVersionLoadVersionNofit nofit;

        /// <remarks/>
        [XmlAttribute()]
        public string name;

        /// <remarks/>
        [XmlAttribute()]
        public string data;
    }

    /// <remarks/>
    public class AirtypeCargoVersion
    {
        /// <remarks/>
        [XmlElement("LoadVersion")]
        public AirtypeCargoVersionLoadVersion[] LoadVersion;
    }

    /// <remarks/>
    public class AirtypeUnsymmetricalPosInfo
    {
        /// <remarks/>
        [XmlAttribute()]
        public int large;

        /// <remarks/>
        [XmlAttribute()]
        public int small;
    }

    /// <remarks/>
    public class AirtypeUnsymmetricalPos
    {
        /// <remarks/>
        [XmlElement("info")]
        public AirtypeUnsymmetricalPosInfo[] info;

        /// <remarks/>
        [XmlAttribute()]
        public string name;
    }

    /// <remarks/>
    public class AirtypeUnsymmetrical
    {
        /// <remarks/>
        [XmlElement("pos")]
        public AirtypeUnsymmetricalPos[] pos;
    }

    //<-- #BR17203 THOMAS
    public class AirtypeLargePalletOverLap
    {
        /// <remarks/>
        [XmlElement("ULD")]
        public AirtypeLargePalletOverLapULD[] ULD;
    }

    /// <remarks/>
    public class AirtypeLargePalletOverLapULD
    {
        /// <remarks/>
        [XmlAttribute()]
        public string Basecode;

        /// <remarks/>
        [XmlAttribute()]
        public string LimitCheckPercent;
    }
     
    //#BR17203 THOMAS -->


    /// <remarks/>
    public class AirtypeCpi
    {
        /// <remarks/>
        [XmlAttribute()]
        public int index;

        /// <remarks/>
        [XmlAttribute()]
        public string cpiFor;
    }

    /// <remarks/>
    public class CargoPositionHoldCmpBayPosBaseCode
    {
        /// <remarks/>
        [XmlAttribute()]
        public string name;

        /// <remarks/>
        [XmlAttribute()]
        public int maxWt;

        /// <remarks/>
        [XmlAttribute()]
        public Single index;
    }

    /// <remarks/>
    public class CargoPositionHoldCmpBayPos
    {
        /// <remarks/>
        [XmlElement("baseCode")]
        public CargoPositionHoldCmpBayPosBaseCode[] baseCode;

        /// <remarks/>
        [XmlAttribute()]
        public string name;

        /// <remarks/>
        [XmlAttribute()]
        public string uasy;

        /// <remarks/>
        [XmlAttribute()]
        public string highCode;

        /// <remarks/>
        [XmlAttribute()]
        public string shc;

        /// <remarks/>
        [XmlAttribute()]
        public Single x;

        /// <remarks/>
        [XmlAttribute()]
        public Single y;

        /// <remarks/>
        [XmlAttribute()]
        public Single w;

        /// <remarks/>
        [XmlAttribute()]
        public Single h;
    }

    /// <remarks/>
    public class CargoPositionHoldCmpBay
    {
        /// <remarks/>
        [XmlElement("pos")]
        public CargoPositionHoldCmpBayPos[] pos;

        /// <remarks/>
        [XmlAttribute()]
        public string name;
    }

    /// <remarks/>
    public class CargoPositionHoldCmp
    {
        /// <remarks/>
        [XmlElement("bay")]
        public CargoPositionHoldCmpBay[] bay;

        /// <remarks/>
        [XmlAttribute()]
        public string name;

        /// <remarks/>
        [XmlAttribute()]
        public Single index;
    }

    /// <remarks/>
    public class CargoPositionHold
    {
        /// <remarks/>
        [XmlElement("cmp")]
        public CargoPositionHoldCmp[] cmp;

        /// <remarks/>
        [XmlAttribute()]
        public string name;

        /// <remarks/>
        [XmlAttribute()]
        public int maxWt;

        /// <remarks/>
        [XmlAttribute()]
        public Single x;

        /// <remarks/>
        [XmlAttribute()]
        public Single y;

        /// <remarks/>
        [XmlAttribute()]
        public Single w;

        /// <remarks/>
        [XmlAttribute()]
        public Single h;

        /// <remarks/>
        [XmlAttribute()]
        public Single d1x;

        /// <remarks/>
        [XmlAttribute()]
        public Single d2x;

        /// <remarks/>
        [XmlAttribute()]
        public Single d1y;
    }

    /// <remarks/>
    [XmlRoot(Namespace = "", IsNullable = false)]
    public class CargoPosition
    {
        /// <remarks/>
        [XmlElement("hold")]
        public CargoPositionHold[] hold;
    }

    /// <remarks/>
    public class CargoInfomationLatchPositionComptLDV_typeAttachLD3
    {

        /// <remarks/>
        [XmlAttribute()]
        public string amount;

        /// <remarks/>
        [XmlAttribute()]
        public string latch_pos;
    }

    /// <remarks/>
    public class CargoInfomationLatchPositionComptLDV_type
    {

        /// <remarks/>
        [XmlElement("attachLD3")]
        public CargoInfomationLatchPositionComptLDV_typeAttachLD3[] attachLD3;

        /// <remarks/>
        [XmlAttribute()]
        public string P_info;

        /// <remarks/>
        [XmlAttribute()]
        public string latch_pos;
    }

    /// <remarks/>
    public class CargoInfomationLatchPositionCompt
    {

        /// <remarks/>
        [XmlElement("LDV_type")]
        public CargoInfomationLatchPositionComptLDV_type[] LDV_type;

        /// <remarks/>
        [XmlAttribute()]
        public string No;
    }

    /// <remarks/>
    public class CargoInfomationLatchPosition
    {

        /// <remarks/>
        [XmlElement("Compt")]
        public CargoInfomationLatchPositionCompt[] Compt;
    }

    /// <remarks/>
    public class CargoInfomationInfo
    {
        /// <remarks/>
        [XmlAttribute()]
        public int maxAsy;

        /// <remarks/>
        [XmlAttribute()]
        public int maxDiffZFW;

        /// <remarks/>
        [XmlAttribute()]
        public int maxDLW;

        /// <remarks/>
        [XmlAttribute()]
        public string ulds;
    }

    /// <remarks/>
    [XmlRoot(Namespace = "", IsNullable = false)]
    public class CargoInfomation
    {
        /// <remarks/>
        [XmlElement("info")]
        public CargoInfomationInfo[] info;

        /// <remarks/>
        [XmlElement("LatchPosition")]
        public CargoInfomationLatchPosition[] LatchPosition;
    }

    /// <remarks/>
    public class CargoFormulaInfo
    {
        /// <remarks/>
        [XmlAttribute()]
        public string id;

        /// <remarks/>
        [XmlAttribute()]
        public int cbWt;

        /// <remarks/>
        [XmlAttribute()]
        public string cbwFor;

        /// <remarks/>
        [XmlAttribute()]
        public int ncuWt;

        /// <remarks/>
        [XmlAttribute()]
        public int icuWt;

        /// <remarks/>
        [XmlAttribute()]
        public string cuwFor;
    }

    /// <remarks/>
    [XmlRoot(Namespace = "", IsNullable = false)]
    public class CargoFormula
    {
        /// <remarks/>
        [XmlElement("info")]
        public CargoFormulaInfo[] info;
    }

    /// <remarks/>
    public class FuelFormulaFuelGradeTank
    {
        /// <remarks/>
        [XmlAttribute()]
        public string name;

        /// <remarks/>
        [XmlAttribute()]
        public string tankFor;
    }

    /// <remarks/>
    public class FuelFormulaFuelGrade
    {
        /// <remarks/>
        [XmlElement("tank")]
        public FuelFormulaFuelGradeTank[] tank;

        /// <remarks/>
        [XmlAttribute()]
        public string name;

        /// <remarks/>
        [XmlAttribute()]
        public string gradeFor;
    }

    /// <remarks/>
    [XmlRoot(Namespace = "", IsNullable = false)]
    public class FuelFormula
    {
        /// <remarks/>
        [XmlElement("fuelGrade")]
        public FuelFormulaFuelGrade[] fuelGrade;
    }

    /// <remarks/>
    public class AirtypeFuelTankArmTankArm
    {
        /// <remarks/>
        [XmlAttribute()]
        public int volume;

        /// <remarks/>
        [XmlAttribute()]
        public Single arm;
    }

    /// <remarks/>
    public class AirtypeFuelTankArmTank
    {
        /// <remarks/>
        [XmlElement("arm")]
        public AirtypeFuelTankArmTankArm[] arm;

        /// <remarks/>
        [XmlAttribute()]
        public string name;
    }

    /// <remarks/>
    public class AirtypeFuelTankArm
    {
        /// <remarks/>
        [XmlElement("tank")]
        public AirtypeFuelTankArmTank[] tank;
    }





    /// <remarks/>
    public class CrewDistributionDistributionInfo
    {
        /// <remarks/>
        [XmlAttribute()]
        public string crewPos;

        /// <remarks/>
        [XmlAttribute()]
        public int crewNo;
    }

    /// <remarks/>
    public class CrewDistributionDistribution
    {
        /// <remarks/>
        [XmlElement("info")]
        public CrewDistributionDistributionInfo[] info;

        /// <remarks/>
        [XmlAttribute()]
        public int crewCount;
    }

    /// <remarks/>
    [XmlRoot(Namespace = "", IsNullable = false)]
    public class CrewDistribution
    {
        /// <remarks/>
        [XmlElement("Distribution")]
        public CrewDistributionDistribution[] Distribution;
    }

    /// <remarks/>
    public class CrewInfomationInfo
    {
        /// <remarks/>
        [XmlAttribute()]
        public string crewPos;

        /// <remarks/>
        [XmlAttribute()]
        public int maxSeat;

        /// <remarks/>
        [XmlAttribute()]
        public Single index;
    }

    /// <remarks/>
    [XmlRoot(Namespace = "", IsNullable = false)]
    public class CrewInfomation
    {
        /// <remarks/>
        [XmlElement("info")]
        public CrewInfomationInfo[] info;
    }

    /// <remarks/>
    public class PantryCodeInfo
    {
        /// <remarks/>
        [XmlAttribute()]
        public string pantry;

        /// <remarks/>
        [XmlAttribute()]
        public int weight;

        /// <remarks/>
        [XmlAttribute()]
        public Single index;
    }

    /// <remarks/>
    [XmlRoot(Namespace = "", IsNullable = false)]
    public class PantryCode
    {
        /// <remarks/>
        [XmlElement("info")]
        public PantryCodeInfo[] info;
    }

    /// <remarks/>
    public class ZonePantryIndexGalleyGinfo
    {
        /// <remarks/>
        [XmlAttribute()]
        public string id;

        /// <remarks/>
        [XmlAttribute()]
        public Single index;
    }

    /// <remarks/>
    public class ZonePantryIndexGalley
    {
        /// <remarks/>
        [XmlElement("ginfo")]
        public ZonePantryIndexGalleyGinfo[] ginfo;
    }

    /// <remarks/>
    public class ZonePantryIndexZoneZinfo
    {
        /// <remarks/>
        [XmlAttribute()]
        public string id;

        /// <remarks/>
        [XmlAttribute()]
        public Single index;

        /// <remarks/>
        [XmlAttribute()]
        public int max;
    }

    /// <remarks/>
    public class ZonePantryIndexZone
    {
        /// <remarks/>
        [XmlElement("zinfo")]
        public ZonePantryIndexZoneZinfo[] zinfo;
    }

    /// <remarks/>
    [XmlRoot(Namespace = "", IsNullable = false)]
    public class ZonePantryIndex
    {
        /// <remarks/>
        public ZonePantryIndexZone zone;

        /// <remarks/>
        public ZonePantryIndexGalley galley;
    }

    /// <remarks/>
    public class SeatRowIndexInfo
    {
        /// <remarks/>
        [XmlAttribute()]
        public int row;

        /// <remarks/>
        [XmlAttribute()]
        public Single index;

        /// <remarks/>
        [XmlAttribute()]
        public string zone;
    }

    /// <remarks/>
    [XmlRoot(Namespace = "", IsNullable = false)]
    public class SeatRowIndex
    {
        /// <remarks/>
        [XmlElement("info")]
        public SeatRowIndexInfo[] info;
    }

    /// <remarks/>
    public class CabinConfigurationSeatplanInfo
    {
        /// <remarks/>
        [XmlAttribute()]
        public string @class;

        /// <remarks/>
        [XmlAttribute()]
        public Single index;

        /// <remarks/>
        [XmlAttribute()]
        public int seats;

        /// <remarks/>
        [XmlAttribute()]
        public string zones;
    }

    /// <remarks/>
    public class CabinConfigurationSeatplan
    {
        /// <remarks/>
        [XmlElement("info")]
        public CabinConfigurationSeatplanInfo[] info;

        /// <remarks/>
        [XmlAttribute()]
        public string name;
    }

    /// <remarks/>
    [XmlRoot(Namespace = "", IsNullable = false)]
    public class CabinConfiguration
    {
        /// <remarks/>
        [XmlElement("seatplan")]
        public CabinConfigurationSeatplan[] seatplan;
    }

    /// <remarks/>
    public class AirtypeCGLmtForLateralLimitPoint
    {
        /// <remarks/>
        [XmlAttribute()]
        public int weight;

        /// <remarks/>
        [XmlAttribute()]
        public Single index;
    }

    /// <remarks/>
    public class AirtypeCGLmtForLateralLimit
    {
        /// <remarks/>
        [XmlElement("point")]
        public AirtypeCGLmtForLateralLimitPoint[] point;

        /// <remarks/>
        [XmlAttribute()]
        public string name;

        /// <remarks/>
        [XmlAttribute()]
        public string code;

        /// <remarks/>
        [XmlAttribute()]
        public string desc;
    }

    /// <remarks/>
    public class AirtypeCGLmtForLateral
    {
        /// <remarks/>
        [XmlElement("limit")]
        public AirtypeCGLmtForLateralLimit[] limit;
    }

    /// <remarks/>
    public class TrimSheetWeightCtrlcodeLimitPoint
    {
        /// <remarks/>
        [XmlAttribute()]
        public int weight;

        /// <remarks/>
        [XmlAttribute()]
        public Single index;
    }

    /// <remarks/>
    public class TrimSheetWeightCtrlcodeLimit
    {
        /// <remarks/>
        [XmlElement("point")]
        public TrimSheetWeightCtrlcodeLimitPoint[] point;

        /// <remarks/>
        [XmlAttribute()]
        public string name;

        /// <remarks/>
        [XmlAttribute()]
        public string code;

        /// <remarks/>
        [XmlAttribute()]
        public string desc;
    }

    /// <remarks/>
    public class TrimSheetWeightCtrlcode
    {
        /// <remarks/>
        [XmlElement("limit")]
        public TrimSheetWeightCtrlcodeLimit[] limit;

        /// <remarks/>
        [XmlAttribute()]
        public string name;

        /// <remarks/>
        [XmlAttribute()]
        public int argumet;
    }

    /// <remarks/>
    public class TrimSheetWeight
    {
        /// <remarks/>
        [XmlElement("ctrlcode")]
        public TrimSheetWeightCtrlcode[] ctrlcode;

        /// <remarks/>
        [XmlAttribute()]
        public string name;
    }

    /// <remarks/>
    [XmlRoot(Namespace = "", IsNullable = false)]
    public class TrimSheet
    {
        /// <remarks/>
        [XmlElement("weight")]
        public TrimSheetWeight[] weight;

        /// <remarks/>
        [XmlAttribute()]
        public int x1;

        /// <remarks/>
        [XmlAttribute()]
        public int y1;

        /// <remarks/>
        [XmlAttribute()]
        public int x2;

        /// <remarks/>
        [XmlAttribute()]
        public int y2;

        /// <remarks/>
        [XmlAttribute()]
        public int xmin;

        /// <remarks/>
        [XmlAttribute()]
        public int xmax;

        /// <remarks/>
        [XmlAttribute()]
        public int ymin;

        /// <remarks/>
        [XmlAttribute()]
        public int ymax;
    }

    /// <remarks/>
    public class MACMacfor
    {
        /// <remarks/>
        [XmlAttribute()]
        public Single refStation;

        /// <remarks/>
        [XmlAttribute()]
        public int reduction;

        /// <remarks/>
        [XmlAttribute()]
        public int constant;

        /// <remarks/>
        [XmlAttribute()]
        public Single mac;

        /// <remarks/>
        [XmlAttribute()]
        public Single lemac;
    }

    /// <remarks/>
    [XmlRoot(Namespace = "", IsNullable = false)]
    public class MAC
    {
        /// <remarks/>
        public MACMacfor macfor;
    }

    /// <remarks/>
    public class AircraftConfigurationConfig
    {
        /// <remarks/>
        [XmlAttribute()]
        public string from;

        /// <remarks/>
        [XmlAttribute()]
        public string to;

        /// <remarks/>
        [XmlAttribute()]
        public string haul;

        /// <remarks/>
        [XmlAttribute()]
        public int pilot;

        /// <remarks/>
        [XmlAttribute()]
        public int crew;

        /// <remarks/>
        [XmlAttribute()]
        public string pantry;

        /// <remarks/>
        [XmlAttribute()]
        public string seatplan;
    }

    /// <remarks/>
    [XmlRoot(Namespace = "", IsNullable = false)]
    public class AircraftConfiguration
    {
        /// <remarks/>
        [XmlElement("config")]
        public AircraftConfigurationConfig[] config;
    }

    [XmlRoot(Namespace = "", IsNullable = false)]
    public class AircraftInfomation
    {
        [XmlElement("Haul")]
        public AircraftInfomationHaul[] Haul;
    }

    public class AircraftInfomationHaul
    {
        /// <remarks/>
        [XmlElement("wtLmt")]
        public AircraftInfomationHaulWtLmt[] wtLmt;

        /// <remarks/>
        [XmlAttribute()]
        public string haul;
    }

    public class AircraftInfomationHaulWtLmt
    {
        /// <remarks/>
        [XmlAttribute()]
        public int mzfw;

        /// <remarks/>
        [XmlAttribute()]
        public int mtow;

        /// <remarks/>
        [XmlAttribute()]
        public int mldw;

        /// <remarks/>
        [XmlAttribute()]
        public int mtw;
    }

    [XmlRoot(Namespace = "", IsNullable = false)]
    public class FuelTank
    {
        [XmlElement("info")]
        public FuelTankInfo[] info;

        [XmlAttribute()]
        public int taxifuel_default;
    }

    public class FuelTankInfo
    {
        [XmlAttribute()]
        public string tank;

        [XmlAttribute()]
        public int capacity;
    }

    //<!--#BR19015
    [XmlRoot(Namespace = "", IsNullable = false)]
    public class FuelDensity
    {
        [XmlElement("info")]
        public FuelDensityInfo[] info;
    }

    public class FuelDensityInfo
    {
        [XmlAttribute()]
        public string index;

        [XmlAttribute()]
        public string value;
    }

    //-->

}