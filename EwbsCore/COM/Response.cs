// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by xsd, Version=1.1.4322.573.
// 

//*****************************************************************************
//* Fio Sun      | Ver. 01 | #BR07007 | 2007/APR/10                           *
//*---------------------------------------------------------------------------*
//* EWBS catch CargoWing's pallet and airmail data.							  *	
//*****************************************************************************
//* Jay Sheu     | Ver. 02 | #BR15111 | Sep 08, 2015              (V3.2.1)    *
//*---------------------------------------------------------------------------*
//* Added method to retreive info from iFuel                                  *
//* Added response class for iFuel info (iFuelResp, FuelTank)                 *
//*****************************************************************************
//* Terri    | Ver. 04 | #BR17101  | 2017/FEB/02                (V3.04.02 )   *
//*---------------------------------------------------------------------------*
//接cargofly資料                                                              *
//*****************************************************************************
//* Thomas   | Ver. 05 | #BR18113  | 2018/06/20                (V4.04.01 )    *
//*---------------------------------------------------------------------------*
// BagPlan and PAX 頁面的 TRA 資料於 Connect to DCS後 更新                    *
//*****************************************************************************

using System;
using System.Xml.Serialization;
using ComInterface;
using EWBS;
using System.Collections;
//------------------------------------------------------------------------------

#region RespErrInd  -- Response Error messaage

/// <summary>
/// Base class for all kinds of response.
/// </summary>
/// <remarks></remarks>
[Serializable]
public class RespErrInd
{
    /// <remarks/>
    public  string CkinFltNbr;

    /// <remarks/>
    public string CkinDepDate;

    /// <remarks/>
    public string CkinDepCty;

    /// <remarks/>
    public int ErrCd = 0; // default: Success

    /// <remarks/>
    [XmlArrayItem("MessageDisplay", IsNullable = false)]
    public RespErrIndMessageDisplay[] ErrOrgMsg;
}

/// <summary>
/// used to store response message
/// </summary>
[Serializable] /// <remarks/>
public class RespErrIndMessageDisplay
{
    /// <remarks/>
    [XmlAttribute()]
    public RespErrIndMessageDisplayLang Lang;

    /// <remarks/>
    [XmlAttribute()]
    public string SYSID;

    /// <remarks/>
    [XmlText()]
    public string Value;
}

[Serializable] /// <remarks/>
public enum RespErrIndMessageDisplayLang
{
    /// <remarks/>
    C,

    /// <remarks/>
    E,
}

#endregion

#region FlightResp

/// <summary>
/// Response for CreateFlight service
/// </summary>
[Serializable]
public class FlightResp : RespErrInd
{
    // The class used for return from CreateFlight or MonitorFlight
    /// <remarks/>
    public Flight flight; // for multi-leg or logged flight

    // send back Signature for airinfo/airlines/account/<acType>
    public Signature[] sigs = new Signature[4];

    public FISResp fisResp;

}

#endregion

#region CRTSResp  -- Response comes from CRTS request

/// <summary>
/// Respose for GetCRTSInfo service
/// </summary>
[Serializable]
[XmlRoot(Namespace = "", IsNullable = false)]
public class CRTSResp : RespErrInd
{
    public int fwdCabin; //number of people in forward cabin 
    public int fwdCabinPNC; //number of PNC people in forward cabin 
    public int aftCabin; //number of people in afterward cabin 
    public int aftCabinPNC; //number of PNC people in afterward cabin 

}

#endregion

#region FISResp  -- Response comes from FIS request

/// <summary>
/// Response for GetFISInfo service
/// </summary>
[Serializable]
[XmlRoot(Namespace = "", IsNullable = false)]
public class FISResp : RespErrInd
{
    public string regno; //registration number 
    public DateTime std; //scheduled time departure
    public DateTime etd; //estimated time departure
    public float tripFuel;
    public float takeoffFuel;
    public float taxiFuel;
    public float plannedZFW;
    public float plannedTOW;

}

#endregion

#region CargoResp  -- Response comes from CargoWin request

/// <summary>
/// Response for GetCargoInfo service
/// </summary>
[Serializable]
[XmlRoot(Namespace = "", IsNullable = false)]

public class CargoResp : RespErrInd
{
    public string version; //Deadload Version
    public CargoData[] cargo; //Cargo Data	
    public BulkData[] bulk; //Cargo Bulk Data	

}

/// <summary>
/// Cargo data retrived from CragoWing
/// </summary>
[Serializable]
public class CargoData
{
    public string dst; //destination
    public string uld; //ULD number
    public float grossWt; //Gross Weight
    public string hghCode; //Height Code
    public string shc; //Special Handling Code
    public string remark; //Remark
    public string priority; //Priority

    //#BR07007<--
    public string catg_type;//catg C or M or X  
    //#BR07007-->
}

/// <summary>
/// Bulk data retrived from CragoWing
/// </summary>
[Serializable]
public class BulkData
{
    public string dst; //destination
    public int pieces; //pieces
    public float grossWt; //Gross Weight
    public string billNo; //billing number
    public string shc; //Special Handling Code
    public string priority; //Priority
    //#BR07007<--
    public string catg_type;//catg C or M or X
    //#BR07007-->
}

#endregion

#region DCSResp  -- Response comes from DCS request

/// <summary>
/// Response for GetDCSInfo
/// </summary>
[Serializable]
[XmlRoot(Namespace = "", IsNullable = false)]
public class DCSResp : RespErrInd
{
    /// <remarks/>
    //<--  隱藏繼承的成員，加入new  關鍵字 -->
    public  new string CkinDepDate; // departure date

    /// <remarks/>
   //<--  隱藏繼承的成員，加入new  關鍵字 -->
    public   new string CkinDepCty; // departure city

    /// <remarks/>
    public string CkinFltStat; // flight status

    /// <remarks/>
    public DCSRespCkinInfo CkinInfo; // check-in information

    /// <remarks/>
    public DCSRespWtSum WtSum; // total weight

    /// <remarks/>
    [XmlElement("SeatMap")]
    public DCSRespSeatMap[] SeatMap; // seat map
}

/// <summary>
/// seat map
/// </summary>
[Serializable] /// <remarks/>
public class DCSRespSeatMap
{
    /// <remarks/>
    public string Dest; //destination				 

    /// <remarks/>
    public string SeatNbr; //Seat No[KEY]

    /// <remarks/>
    public string Sex; //Gender(such as M/F/C/I)

    /// <remarks/>
    public int BagPcs; //Baggage Pieces

    /// <remarks/>
    public int BagWt; //Baggage Weight

    /// <remarks/>
    public string StatCd; //Code(such as R/T/Z/X)
}

/// <summary>
/// zone passenger count
/// </summary>
[Serializable] /// <remarks/>
public class DCSRespWtSumZnInfo
{
    /// <remarks/>
    public string ZnCd; // zone

    /// <remarks/>
    public int ZnPaxCnt; // passenger count

    /// <remarks/>
    public int SOC; // SOC
}

/// <summary>
/// store baggage weight and pieces
/// </summary>
[Serializable] /// <remarks/>
public class ClsBagsType
{
    /// <remarks/>
    public int BagPcs;

    /// <remarks/>
    public int BagWt;
}

/// <summary>
/// sum of weight and pieces for each passenger class
/// </summary>
[Serializable] /// <remarks/>
public class DCSRespWtSumPaxBags
{
    /// <remarks/>
    public string Dest;

    /// <remarks/>
    public ClsBagsType FrstClsBags;

    /// <remarks/>
    public ClsBagsType SecClsBags;

    /// <remarks/>
    public ClsBagsType LastClsBags;
}

/// <summary>
/// Male, female, child, infant cont per class
/// </summary>
[Serializable] /// <remarks/>
public class ClsMFCIType
{
    /// <remarks/>
    public int MaleCnt;

    /// <remarks/>
    public int FamaleCnt;

    /// <remarks/>
    public int ChildCnt;

    /// <remarks/>
    public int InfantCnt;
}

/// <summary>
/// Male, female, child, infant cont for each class
/// </summary>
[Serializable] /// <remarks/>
public class DCSRespWtSumPaxMFCI
{
    /// <remarks/>
    public string Dest;

    /// <remarks/>
    public ClsMFCIType FrstClsMFCI;

    /// <remarks/>
    public ClsMFCIType SecClsMFCI;

    /// <remarks/>
    public ClsMFCIType LastClsMFCI;


    //<!--#BR18113 Thomas 新增PAX 頁面TRA MFCI使用
    /// <remarks/>
    public ClsMFCIType FrstTraClsMFCI;

    /// <remarks/>
    public ClsMFCIType SecTraClsMFCI;

    /// <remarks/>
    public ClsMFCIType LastTraClsMFCI;
    //#BR18113-->
}

/// <summary>
/// zone, baggage, and MFCI information
/// </summary>
[Serializable] /// <remarks/>
public class DCSRespWtSum
{
    /// <remarks/>
    [XmlElement("PaxMFCI")]
    public DCSRespWtSumPaxMFCI[] PaxMFCI;

    /// <remarks/>
    [XmlElement("PaxBags")]
    public DCSRespWtSumPaxBags[] PaxBags;

    /// <remarks/>
    [XmlElement("TraPaxBags")]
    public DCSRespWtSumPaxBags[] TraPaxBags;


    /// <remarks/>
    [XmlElement("ZnInfo")]
    public DCSRespWtSumZnInfo[] ZnInfo;
}

/// <summary>
/// count for each class passenger by destination
/// </summary>
[Serializable] /// <remarks/>
public class ClsPaxNbrType
{
    /// <remarks/>
    public string Dest;

    /// <remarks/>
    public int FrstClsPax;

    /// <remarks/>
    public int SecClsPax;

    /// <remarks/>
    public int LastClsPax;
}

/// <summary>
/// passenger information for booked. check-in, and available
/// </summary>
[Serializable] /// <remarks/>
public class DCSRespCkinInfo
{
    /// <remarks/>
    public string BrdgGate;

    /// <remarks/>
    public string CkinCFG;

    /// <remarks/>
    [XmlElement("BkdNbr")]
    public ClsPaxNbrType[] BkdNbr;

    /// <remarks/>
    [XmlElement("CkinNbr")]
    public ClsPaxNbrType[] CkinNbr;

    /// <remarks/>
    [XmlElement("AvblNbr")]
    public ClsPaxNbrType[] AvblNbr;

    /// <remarks/>
    public int BlkSeat;

    //<!-- #BR18113 Thomas 新增PAX頁面 Check in TRA人數使用
    /// <remarks/>
    [XmlElement("CkinTraNbr")]
    public ClsPaxNbrType[] CkinTraNbr;
    //#BR18113 -->
}

#endregion

#region iFuelResp  -- iFuel response class (#BR15111 - JayS)
//BR15111<--
[Serializable]
public class iFuelResp : RespErrInd
{
    public string ACName;

    public string ACType;

    public DateTime ETD;

    public string ArrivalStn;

    public double RampFuel;

    public double UnusableFuelCTR;

    public double UnusableFuelTRIM;

    public double BallastFuel;

    public string PotableWater;

    public double Density;

    public string DensityUnit;

    public FuelTank[] FuelTanks;

    public override string ToString()
    {
        if (this.ErrCd != 0)
        {
            // Error
            string err = Environment.NewLine + "iFuel Information Log: " + Environment.NewLine
            + "Log Date & Time: " + DateTime.Now.ToString("yyyy/MM/dd HH:mm:ss") + Environment.NewLine
            + "iFuel information error: ";
            for (int i = 0; i < this.ErrOrgMsg.Length; ++i)
            {
                err += "[" + this.ErrOrgMsg[i].Value + "],";
            }

            return err + Environment.NewLine + "End of log." + Environment.NewLine;
        }

        System.Text.StringBuilder sb = new System.Text.StringBuilder(Environment.NewLine + "iFuel Information Log: " + Environment.NewLine
            + "Log Date & Time: " + DateTime.Now.ToString("yyyy/MM/dd HH:mm:ss") + Environment.NewLine);
        sb.Append("Flight Number  : " + this.CkinFltNbr + Environment.NewLine)
            .Append("Departure City : " + this.CkinDepCty + Environment.NewLine)
            .Append("Arrival City   : " + this.ArrivalStn + Environment.NewLine)
            .Append("Departure Date : " + this.CkinDepDate + Environment.NewLine)
            .Append("Aircraft Data: " + Environment.NewLine)
            .Append("Aircraft          : " + this.ACName + Environment.NewLine)
            .Append("Aircraft Type     : " + this.ACType + Environment.NewLine)
            .Append("Potable Water (KG): " + this.PotableWater + Environment.NewLine)
            .Append("Density     (KG/" + this.DensityUnit + "): " + this.Density + Environment.NewLine)
            .Append("Fuel data:" + Environment.NewLine)
            .Append("Ramp Fuel     (KG): " + this.RampFuel + Environment.NewLine)
            .Append("Unusable CTR  (KG): " + this.UnusableFuelCTR + Environment.NewLine)
            .Append("Unusable TRIM (KG): " + this.UnusableFuelTRIM + Environment.NewLine)
            .Append("Ballast Fuel  (KG): " + this.BallastFuel + Environment.NewLine)
            .Append("Fuel Tank(s) Data:" + Environment.NewLine);

        if (this.FuelTanks != null)
        {
            for (int i = 0; i < this.FuelTanks.Length; ++i)
            {
                sb.AppendFormat("{0,-5} (KG): {1}" + Environment.NewLine, this.FuelTanks[i].Name, this.FuelTanks[i].Amount);
            }
        }

        sb.Append("End of log." + Environment.NewLine);

        return sb.ToString();
    }
}


[Serializable]
public class FuelTank
{
    public int Order;

    public string Name;

    public double Amount;
}
//BR15111-->
#endregion

#region CargoFlyResp  -- Response comes from CargoFly request  #BR17101

/// <summary>
/// Response for GetCargoFlyInfo service
/// </summary>
[Serializable]
[XmlRoot(Namespace = "", IsNullable = false)]
public class CargoFlyResp : RespErrInd
{
    public string version; //Deadload Version
    //public CargoFlyData[] cargo; //Cargo Data	
    public BulkData_CargoFly[] bulk; //Cargo Bulk Data	
}

/// <summary>
/// Cargo data retrived from CargoFly
/// </summary>
//[Serializable]
//public class CargoFlyData
//{
//	public string dst; //destination
//	public string uld; //ULD number
//	public float grossWt; //Gross Weight
//	public string hghCode; //Height Code
//	public string shc; //Special Handling Code
//	public string remark; //Remark
//	public string priority; //Priority
//	
//	//#BR07007<--
//	public string catg_type;//catg C or M or X  
//	//#BR07007-->
//}

/// <summary>
/// Bulk data retrived from CargoFly
/// </summary>
[Serializable]
public class BulkData_CargoFly
{
    public string dst; //destination
    public int pieces; //pieces
    public float grossWt; //Gross Weight
    public string billNo; //billing number
    public string shc; //Special Handling Code
    //#BR07007<--
    public string catg_type;//catg C or M or X
    //#BR07007-->
    public string desc; //DESCRIPTION
}

#endregion